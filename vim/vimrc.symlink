syntax on
filetype on

set shiftwidth=2
set shiftround
set ruler
set backspace=2
set whichwrap=<,>,[,]
set expandtab

set backupdir=~/tmp/vim
set directory=~/tmp/vim
set history=1000 " change history to 1000
set textwidth=120

set backspace=indent,eol,start " make backspace behave in a sane manner
"set clipboard=unnamed          " use the system clipboard

"if has('mouse')
"  set mouse=a
"endif

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

" Appearance {{{
" set number " show line numbers
set wrap " turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking
set autoindent " automatically set indent of new line
set ttyfast " faster redrawing
set laststatus=2 " show the status line all the time
set so=7 " set 7 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
"set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set shell=$SHELL
set cmdheight=1 " command bar height
set title " set terminal title
set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink
set updatetime=300
"set signcolumn=yes
"set shortmess+=c

" Tab control
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 4 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

" code folding settings
set foldmethod=syntax " fold based on indent
set foldlevelstart=99
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

" toggle invisible characters
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=↪

"set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
" switch cursor to line when in insert mode, and block when not
"set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
"\,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
"\,sm:block-blinkwait175-blinkoff150-blinkon175

if &term =~ '256color'
"    " disable background color erase
    set t_ut=
endif

function CurlyBracket()
    let l:startline = line(".")
    let l:result1 =  searchpair('{', '', '}', 'bW')
    if (result1 > 0)
        let l:linenum = line(".")
        let l:string1 = substitute(getline(l:linenum), '^\s*\(.*\)\s*$','\1', "")
        if (l:string1 =~ '^{')
            let l:string1 = substitute(getline(l:linenum - 1),'^\s*\(.*\)\s*$', '\1', "") . " " . l:string1
            sil exe "normal k"
        endif

        " get else part if necessary
        if (l:string1 =~ "^}")
            sil exe "normal 0"
            let l:result2 =  searchpair('{', '', '}', 'bW')
            if (l:result2 > 0)
                let l:linenum = line(".")
                let l:string2 = substitute(getline(l:linenum),'^\s*\(.*\)\s*$', '\1', "")
                if (l:string2 =~ '^{')
                    let l:string2 = substitute(getline(l:linenum - 1),'^\s*\(.*\)\s*$', '\1', "") . " " . l:string2
                endif
                let l:string1 = l:string2 . " ... " . l:string1
            endif
        endif

        " remove trailing whitespaces and curly brace
        let l:my_string = substitute(l:string1, '\s*{[^{]*$', '', "")
        let l:my_strlen = strlen(l:my_string)
        if (l:my_strlen > 30)
            let l:my_string = strpart(l:my_string,0,30)."..."
        endif

        sil exe ":" . l:startline
        sil exe "normal i}"
        if ((l:startline - l:linenum) > 5)
            sil exe "normal a /* " . l:my_string . " */"
        endif

    endif
endfunction

function! MyProgSettings()
  set ts=2
  imap }<CR> <ESC>:call CurlyBracket()<CR>a
"  source ~/.vimrc.indent
endfunction

function! MyMailSettings()
  set formatoptions+=t
  set textwidth=72
  set ts=3
endfunction

call plug#begin('~/.vim/plugged')

Plug 'mrk21/yaml-vim', { 'for': 'yaml' }
Plug 'benmills/vimux'

call plug#end()

" add yaml stuff
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType python setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType mail,human,vim call MyMailSettings()
autocmd FileType c,php,perl,ruby call MyProgSettings()

" autocmd FileType text set filetype=conf

"source ~/.dotfiles/vim/vimrc.color
source ~/.dotfiles/vim/argonaut.vim
